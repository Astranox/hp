# -*- coding: utf-8 -*-
# Generated by Django 1.9.7 on 2016-06-09 18:39
from __future__ import unicode_literals

import core.modelfields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import mptt.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0007_alter_validators_add_error_messages'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('jid', models.CharField(max_length=255, unique=True, verbose_name='JID')),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('gpg_fingerprint', models.CharField(blank=True, max_length=40, null=True)),
                ('registered', models.DateTimeField(auto_now_add=True)),
                ('registration_method', models.SmallIntegerField(choices=[(0, 'Via Website'), (1, 'In-Band Registration'), (2, 'Manually'), (9, 'Unknown')])),
                ('confirmed', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'abstract': False,
                'verbose_name_plural': 'users',
            },
        ),
        migrations.CreateModel(
            name='BlogPost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('title_de', models.CharField(help_text='Page title', max_length=64)),
                ('title_en', models.CharField(help_text='Page title', max_length=64)),
                ('slug_de', models.CharField(help_text='Slug (used in URLs)', max_length=64, unique=True)),
                ('slug_en', models.CharField(help_text='Slug (used in URLs)', max_length=64, unique=True)),
                ('text_de', models.TextField()),
                ('text_en', models.TextField()),
                ('published', models.BooleanField(default=True, help_text='Wether or not the page is public.')),
                ('sticky', models.BooleanField(default=False, help_text='Pinned at the top of any list of blog posts.')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MenuItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('title_de', models.CharField(help_text='Page title', max_length=16)),
                ('title_en', models.CharField(help_text='Page title', max_length=16)),
                ('target', core.modelfields.LinkTarget()),
                ('lft', models.PositiveIntegerField(db_index=True, editable=False)),
                ('rght', models.PositiveIntegerField(db_index=True, editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(db_index=True, editable=False)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='core.MenuItem')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('_default_manager', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Page',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('title_de', models.CharField(help_text='Page title', max_length=64)),
                ('title_en', models.CharField(help_text='Page title', max_length=64)),
                ('slug_de', models.CharField(help_text='Slug (used in URLs)', max_length=64, unique=True)),
                ('slug_en', models.CharField(help_text='Slug (used in URLs)', max_length=64, unique=True)),
                ('text_de', models.TextField()),
                ('text_en', models.TextField()),
                ('published', models.BooleanField(default=True, help_text='Wether or not the page is public.')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
